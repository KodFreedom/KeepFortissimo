//--------------------------------------------------------------------------------
//  main system
//  メインシステム
//  主系统
//
//  Autor  : 徐 文杰(Wenjie Xu)
//  Github : kodfreedom
//  Email  : kodfreedom@gmail.com
//--------------------------------------------------------------------------------
#pragma once
#include <Windows.h>
#include "../Utilities/singleton.h"
#include "../Utilities/kf_labels.h"

namespace KeepFortissimo
{
    class MainSystem : public Singleton<MainSystem>
    {
        friend class Singleton<MainSystem>;

    public:
        //--------------------------------------------------------------------------------
        //  Create the instance and initialize it
        //  Arguments : HINSTANCE
        //  Return：true when succeeded, else false
        //--------------------------------------------------------------------------------
        //  インスタンスの生成と初期化処理
        //  引数 : HINSTANCE
        //  戻り値：成功したらtrue、失敗したらfalse
        //--------------------------------------------------------------------------------
        //  生成实体并初始化
        //  参数 : HINSTANCE
        //  返回值：成功则返回true、反之返回false
        //--------------------------------------------------------------------------------
        static bool StartUp(HINSTANCE instance_handle);

        //--------------------------------------------------------------------------------
        //  Run the main system
        //  Arguments :
        //  Return：return the message.wparam when is over
        //--------------------------------------------------------------------------------
        //  実行処理
        //  引数 :
        //  戻り値：処理終わったらmessage.wparamを返す
        //--------------------------------------------------------------------------------
        //  主系统实行处理
        //  参数 :
        //  返回值：实行完毕则返回message.wparam
        //--------------------------------------------------------------------------------
        int Run();

    private:
        //--------------------------------------------------------------------------------
        //  constructor
        //  コンストラクタ
        //  构造函数
        //--------------------------------------------------------------------------------
        MainSystem(HINSTANCE instance_handle);

        //--------------------------------------------------------------------------------
        //  destructor
        //  デストラクタ
        //  析构函数
        //--------------------------------------------------------------------------------
        ~MainSystem();

        //--------------------------------------------------------------------------------
        //  delete the copy constructor and operator
        //  コピーコンストラクタとオペレーターの削除
        //  删除复制用构造函数与等号
        //--------------------------------------------------------------------------------
        MainSystem() = delete;
        MainSystem(MainSystem const&) = delete;
        void operator=(MainSystem const&) = delete;

        //--------------------------------------------------------------------------------
        //  initialize the instance
        //  Arguments :
        //  Return：true when succeeded, else false
        //--------------------------------------------------------------------------------
        //  初期化処理
        //  引数 :
        //  戻り値：成功したらtrue、失敗したらfalse
        //--------------------------------------------------------------------------------
        //  初始化
        //  参数 :
        //  返回值：成功则返回true、反之返回false
        //--------------------------------------------------------------------------------
        bool Initialize() override;

        //--------------------------------------------------------------------------------
        //  Uninit the instance
        //  Arguments :
        //  Return：
        //--------------------------------------------------------------------------------
        //  インスタンスの終了処理
        //  引数 :
        //  戻り値：
        //--------------------------------------------------------------------------------
        //  终了处理
        //  参数 :
        //  返回值：
        //--------------------------------------------------------------------------------
        void Uninitialize() override;

        //--------------------------------------------------------------------------------
        //  variable / 変数 / 变量
        //--------------------------------------------------------------------------------
        HINSTANCE instance_handle_;
        Language  current_language_;
    };
}