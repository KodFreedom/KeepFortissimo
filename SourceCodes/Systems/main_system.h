//--------------------------------------------------------------------------------
//  main system
//  メインシステム
//  主系统
//
//  Autor  : 徐 文杰(Wenjie Xu)
//  Github : kodfreedom
//  Email  : kodfreedom@gmail.com
//--------------------------------------------------------------------------------
#pragma once
#include <Windows.h>
#include "../Utilities/singleton.h"
#include "../Utilities/kf_labels.h"

namespace KeepFortissimo
{
    class MainSystem : public Singleton<MainSystem>
    {
        friend class Singleton<MainSystem>;

    public:
        //--------------------------------------------------------------------------------
        //  Create the instance and initialize it
        //  Arguments : HINSTANCE
        //  Return：true when succeeded, else false
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  インスタンスの生成と初期化処理
        //  引数 : HINSTANCE
        //  戻り値：成功したらtrue、失敗したらfalse
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  生成实体并初始化
        //  参数 : HINSTANCE
        //  返回值：成功则返回true、反之返回false
        //--------------------------------------------------------------------------------
        static bool StartUp() = delete;
        static bool StartUp(HINSTANCE instance_handle);

        //--------------------------------------------------------------------------------
        //  Run the main system
        //  Return：return the message.wparam when is over
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  実行処理
        //  戻り値：処理終わったらmessage.wparamを返す
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  主系统实行处理
        //  返回值：实行完毕则返回message.wparam
        //--------------------------------------------------------------------------------
        int Run();

        //--------------------------------------------------------------------------------
        //  Get the width of the game window
        //  Return：u32
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  ウインドウの幅
        //  戻り値：u32
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  主系统实行处理
        //  返回值：u32
        //--------------------------------------------------------------------------------
        u32 Width() const { return m_width; }

        //--------------------------------------------------------------------------------
        //  Run the main system
        //  Return：return the message.wparam when is over
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  実行処理
        //  戻り値：処理終わったらmessage.wparamを返す
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  主系统实行处理
        //  返回值：实行完毕则返回message.wparam
        //--------------------------------------------------------------------------------
        u32 Height() const { return m_height; }

        //--------------------------------------------------------------------------------
        //  Run the main system
        //  Return：return the message.wparam when is over
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  実行処理
        //  戻り値：処理終わったらmessage.wparamを返す
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  主系统实行处理
        //  返回值：实行完毕则返回message.wparam
        //--------------------------------------------------------------------------------
        HWND MainWindowHandle() const { return m_main_window_handle; }

        //--------------------------------------------------------------------------------
        //  Manage the window messages
        //  Arguments : HWND
        //              u32
        //              WPARAM
        //              LPARAM
        //  Return：LRESULT
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  ウインドウメッセージ処理
        //  引数 : HWND
        //         u32
        //         WPARAM
        //         LPARAM
        //  戻り値：LRESULT
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  窗口消息处理
        //  参数 : HWND
        //         u32
        //         WPARAM
        //         LPARAM
        //  返回值：LRESULT
        //--------------------------------------------------------------------------------
        LRESULT MsgProc(HWND hwnd, u32 msg, WPARAM wparam, LPARAM lparam);

        //--------------------------------------------------------------------------------
        //  Check that if the window is paused
        //  Return：true if paused, else false
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  ウインドウはポースしたかどうかを返す
        //  戻り値：ポースしたらtrueを返す、じゃなかったらfalse
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  返回窗口是否被暂停
        //  返回值：暂停则返回true，反之false
        //--------------------------------------------------------------------------------
        bool Paused() const { return m_paused; }

    private:
        //--------------------------------------------------------------------------------
        //  constructor
        //  コンストラクタ
        //  构造函数
        //--------------------------------------------------------------------------------
        MainSystem(HINSTANCE instance_handle);

        //--------------------------------------------------------------------------------
        //  destructor
        //  デストラクタ
        //  析构函数
        //--------------------------------------------------------------------------------
        ~MainSystem();

        //--------------------------------------------------------------------------------
        //  delete the copy constructor and operator
        //  コピーコンストラクタとオペレーターの削除
        //  删除复制用构造函数与等号
        //--------------------------------------------------------------------------------
        MainSystem() = delete;
        MainSystem(MainSystem const&) = delete;
        void operator=(MainSystem const&) = delete;

        //--------------------------------------------------------------------------------
        //  initialize the instance
        //  初期化処理
        //  初始化
        //--------------------------------------------------------------------------------
        bool Initialize() override;

        //--------------------------------------------------------------------------------
        //  Uninit the instance
        //  インスタンスの終了処理
        //  终了处理
        //--------------------------------------------------------------------------------
        void Uninitialize() override;

        //--------------------------------------------------------------------------------
        //  Get the os' user language
        //  OSの言語を取得
        //  取得OS的语言
        //--------------------------------------------------------------------------------
        void GetSystemLanguage();

        //--------------------------------------------------------------------------------
        //  Initialize game window
        //  ウインドウ初期化処理
        //  窗口初始化
        //--------------------------------------------------------------------------------
        bool InitializeWindow();

        //--------------------------------------------------------------------------------
        //  Call the game systems' update function
        //  ゲームシステムの更新
        //  更新处理
        //--------------------------------------------------------------------------------
        void Update();

        //--------------------------------------------------------------------------------
        //  Render the current scene
        //  描画処理
        //  渲染处理
        //--------------------------------------------------------------------------------
        void Render();

        //--------------------------------------------------------------------------------
        //  Update when WM_ACTIVATE is called
        //  WM_ACTIVATEの時呼ばれる
        //  WM_ACTIVATE时呼出
        //--------------------------------------------------------------------------------
        void OnWmActivate(WPARAM wparam);

        //--------------------------------------------------------------------------------
        //  Update when WM_SIZE is called
        //  WM_SIZEの時呼ばれる
        //  WM_SIZE时呼出
        //--------------------------------------------------------------------------------
        void OnWmSize(WPARAM wparam, LPARAM lparam);

        //--------------------------------------------------------------------------------
        //  Update when WM_ENTERSIZEMOVE is called
        //  WM_ENTERSIZEMOVEの時呼ばれる
        //  WM_ENTERSIZEMOVE时呼出
        //--------------------------------------------------------------------------------
        void OnWmEnterSizeMove();

        //--------------------------------------------------------------------------------
        //  Update when WM_EXITSIZEMOVE is called
        //  WM_EXITSIZEMOVEの時呼ばれる
        //  WM_EXITSIZEMOVE时呼出
        //--------------------------------------------------------------------------------
        void OnWmExitSizeMove();

        //--------------------------------------------------------------------------------
        //  Update when WM_KEYUP is called
        //  WM_KEYUPの時呼ばれる
        //  WM_KEYUP时呼出
        //--------------------------------------------------------------------------------
        void OnWmKeyUp(WPARAM wparam, LPARAM lparam);

        //--------------------------------------------------------------------------------
        //  const variable / 定数 / 定量
        //--------------------------------------------------------------------------------
        static constexpr u32 sc_default_width = 1280;
        static constexpr u32 sc_default_height = 720;

        //--------------------------------------------------------------------------------
        //  variable / 変数 / 变量
        //--------------------------------------------------------------------------------
        HINSTANCE m_instance_handle = nullptr;
        HWND      m_main_window_handle = nullptr;
        bool      m_paused = false;
        bool      m_minimized= false;
        bool      m_maximized= false;
        bool      m_resizing = false;
        bool      m_fullscreen_state = false;
        bool      m_initialized = false;
        u32       m_width = 0;
        u32       m_height = 0;
        Language  m_current_language = Language::kEnglish;
    };
}