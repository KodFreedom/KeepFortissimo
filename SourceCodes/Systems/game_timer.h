//--------------------------------------------------------------------------------
//  GameTimer
//  時間管理システム
//  游戏内时间管理系统
//
//  Autor  : 徐 文杰(Wenjie Xu)
//  Github : kodfreedom
//  Email  : kodfreedom@gmail.com
//--------------------------------------------------------------------------------
#pragma once
#include <Windows.h>
#include "../Utilities/singleton.h"

namespace KeepFortissimo
{
    class GameTimer : public Singleton<GameTimer>
    {
        friend class Singleton<GameTimer>;

    public:
        //--------------------------------------------------------------------------------
        //  delta time between the last two frames
        //  Return：delta time(float)
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  フレーム間の経過時間
        //  戻り値：delta time(float)
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  两帧之间的经过时间
        //  返回值：delta time(float)
        //--------------------------------------------------------------------------------
        float DeltaTime() const { return delta_time_; }

        //--------------------------------------------------------------------------------
        //  Get the time scale value
        //  Return：time scale(float)
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  タイムスケールの取得
        //  戻り値：time scale(float)
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  取得时间快慢系数
        //  返回值：time scale(float)
        //--------------------------------------------------------------------------------
        float TimeScale() const { return time_scale_; }

        //--------------------------------------------------------------------------------
        //  Set the time scale value
        //  Arguments : time scale(float)
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  タイムスケールの設定
        //  引数 : time scale(float)
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  设定时间快慢系数
        //  参数 : time scale(float)
        //--------------------------------------------------------------------------------
        void SetTimeScale(const float time_scale) { time_scale_ = time_scale; }

        //--------------------------------------------------------------------------------
        //  Get the scaled delta time
        //  Return：scaled delta time(float)
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  タイムスケールに掛けたデルタタイムの取得
        //  戻り値：scaled delta time(float)
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  取得与快慢系数相乘之后的时间间隔
        //  返回值：scaled delta time(float)
        //--------------------------------------------------------------------------------
        float ScaledDeltaTime() const { return scaled_delta_time_; }

        //--------------------------------------------------------------------------------
        //  Set the fps limit (unlimited if 0)
        //  Arguments : fps limit(UINT)
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  fps制限の設定（0 : リミットがない）
        //  引数 : fps limit(UINT)
        //ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
        //  设定FPS限制（0则无限制）
        //  参数 : fps limit(UINT)
        //--------------------------------------------------------------------------------
        void SetFpsLimit(const UINT fps_limit);

        //--------------------------------------------------------------------------------
        //  Tick! Tack!
        //  タイム走れ！
        //  让子弹飞！
        //--------------------------------------------------------------------------------
        void Tick();

        //--------------------------------------------------------------------------------
        //  Check if it's time for updating the frame
        //  フレーム更新の時間になったかをチェック
        //  确认是否经过了一定时间以让我们更新下一帧
        //--------------------------------------------------------------------------------
        bool CanUpdateFrame();

    private:
        //--------------------------------------------------------------------------------
        //  constructor
        //  コンストラクタ
        //  构造函数
        //--------------------------------------------------------------------------------
        GameTimer();

        //--------------------------------------------------------------------------------
        //  destructor
        //  デストラクタ
        //  析构函数
        //--------------------------------------------------------------------------------
        ~GameTimer();

        //--------------------------------------------------------------------------------
        //  delete the copy constructor and operator
        //  コピーコンストラクタとオペレーターの削除
        //  删除复制用构造函数与等号
        //--------------------------------------------------------------------------------
        GameTimer(GameTimer const&) = delete;
        void operator=(GameTimer const&) = delete;

        //--------------------------------------------------------------------------------
        //  initialize the instance
        //  初期化処理
        //  初始化
        //--------------------------------------------------------------------------------
        bool Initialize() override;

        //--------------------------------------------------------------------------------
        //  Uninit the instance
        //  インスタンスの終了処理
        //  终了处理
        //--------------------------------------------------------------------------------
        void Uninitialize() override {}

        //--------------------------------------------------------------------------------
        //  const variable / 定数 / 定量
        //--------------------------------------------------------------------------------
        static constexpr UINT kDefaultFpsLimit = 120;

        //--------------------------------------------------------------------------------
        //  variable / 変数 / 变量
        //--------------------------------------------------------------------------------
        LARGE_INTEGER frequency_;
        LARGE_INTEGER current_time_;
        LARGE_INTEGER exec_last_time_;
        LARGE_INTEGER fps_last_time_;
        float         delta_time_;
        float         time_scale_;
        float         scaled_delta_time_;
        float         time_interval_;       // 更新間隔
        UINT          fps_limit_;
    };
}